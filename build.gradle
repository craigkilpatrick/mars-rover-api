plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.marsrover'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.28'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	// ✅ Essential test dependencies only
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
}

// ✅ Enforce only stable dependencies
configurations.all {
	resolutionStrategy {
		eachDependency { DependencyResolveDetails details ->
			// Reject versions that contain alpha, beta, RC, M (milestone), or snapshot
			// Ensure only dependency versions are checked (not Gradle task names)
			if (details.requested.version && details.requested.version =~ /(?i)-?(alpha|beta|rc|m[0-9]+|snapshot)[.\d-]*/) {
					throw new GradleException("Unstable version detected: ${details.requested}")
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

springBoot{
	mainClass = "com.marsrover.api.MarsRoverApplication"
}

bootJar {
	archiveFileName = "mars-rover-api.jar"
}

jacocoTestReport {
	dependsOn test // the report task will be executed after the test task

	reports {
		xml.required.set(true)  // Enables the XML report
		csv.required.set(false) // Disables the CSV report
		html.required.set(true) // Enables the HTML report
	}
}

// To ensure that the JaCoCo test report is run every time tests are run, you can add:
test {
	finalizedBy jacocoTestReport // Run Jacoco after running tests
}
